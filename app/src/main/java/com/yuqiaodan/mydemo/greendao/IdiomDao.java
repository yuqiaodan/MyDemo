package com.yuqiaodan.mydemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuqiaodan.mydemo.greendao.bean.Idiom;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IDIOM".
*/
public class IdiomDao extends AbstractDao<Idiom, Long> {

    public static final String TABLENAME = "IDIOM";

    /**
     * Properties of entity Idiom.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Word = new Property(1, String.class, "word", false, "WORD");
        public final static Property Pinyin = new Property(2, String.class, "pinyin", false, "PINYIN");
        public final static Property Derivation = new Property(3, String.class, "derivation", false, "DERIVATION");
        public final static Property Example = new Property(4, String.class, "example", false, "EXAMPLE");
        public final static Property Explanation = new Property(5, String.class, "explanation", false, "EXPLANATION");
        public final static Property Abbreviation = new Property(6, String.class, "abbreviation", false, "ABBREVIATION");
    }


    public IdiomDao(DaoConfig config) {
        super(config);
    }
    
    public IdiomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IDIOM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WORD\" TEXT," + // 1: word
                "\"PINYIN\" TEXT," + // 2: pinyin
                "\"DERIVATION\" TEXT," + // 3: derivation
                "\"EXAMPLE\" TEXT," + // 4: example
                "\"EXPLANATION\" TEXT," + // 5: explanation
                "\"ABBREVIATION\" TEXT);"); // 6: abbreviation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IDIOM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Idiom entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(2, word);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(3, pinyin);
        }
 
        String derivation = entity.getDerivation();
        if (derivation != null) {
            stmt.bindString(4, derivation);
        }
 
        String example = entity.getExample();
        if (example != null) {
            stmt.bindString(5, example);
        }
 
        String explanation = entity.getExplanation();
        if (explanation != null) {
            stmt.bindString(6, explanation);
        }
 
        String abbreviation = entity.getAbbreviation();
        if (abbreviation != null) {
            stmt.bindString(7, abbreviation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Idiom entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String word = entity.getWord();
        if (word != null) {
            stmt.bindString(2, word);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(3, pinyin);
        }
 
        String derivation = entity.getDerivation();
        if (derivation != null) {
            stmt.bindString(4, derivation);
        }
 
        String example = entity.getExample();
        if (example != null) {
            stmt.bindString(5, example);
        }
 
        String explanation = entity.getExplanation();
        if (explanation != null) {
            stmt.bindString(6, explanation);
        }
 
        String abbreviation = entity.getAbbreviation();
        if (abbreviation != null) {
            stmt.bindString(7, abbreviation);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Idiom readEntity(Cursor cursor, int offset) {
        Idiom entity = new Idiom( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // word
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pinyin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // derivation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // example
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // explanation
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // abbreviation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Idiom entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWord(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPinyin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDerivation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExample(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExplanation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAbbreviation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Idiom entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Idiom entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Idiom entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
